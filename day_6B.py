# Day 6B - how many fish are there at day 256?
# In theory I could just change my loop from day_6A to run all the way through range(256)...
# ... but rough math says the loop would take several thousand years to finish.
# Instead, I'm going to figure out how many fish are generated from one fish in 128 days (for each "starting status")
# Then figure out how many fish are generated in 256 days from one fish
# Then multiply those estimates by the distribution of actual starting fish to get our final.

import pandas as pd
import numpy as np

data = pd.read_csv('data/day6.csv', header = None)
school_of_fish = data.iloc[0].values.tolist()

# Get a dictionary with the initial distribution by 'day count status'
initial_distribution = np.unique(school_of_fish, return_counts = True)
initial_distribution = dict(zip(*initial_distribution))

# Map out how many fish are generated by one fish of each 'day count status' and the distribution of those fish
mapping_128 = {}
for i in range(9):
    example_schools = [i]
    for day in range(128):
        new_school = []
        for oldfish in example_schools:
            fish = example_schools.pop(0)
            if fish == 0:
                new_school.append(8)
                example_schools.append(6)

            else:
                fish -= 1
                example_schools.append(fish)

        for each in new_school:
            example_schools.append(each)

        summary = np.unique(example_schools, return_counts = True)
        summary = dict(zip(*summary))

    mapping_128[i] = (summary)

# Translate the mapping into a total generated population from each initial fish
mapping_totals_128 = {}
for i in range(9):
    mapping_totals_128[i] = sum(mapping_128[i].values())

# Translate these 128 day figures into 256 (basically figure out the generated population from each fish at 128 days)
total_fish_256 = {}
for i in range(9):
    temp_fish = []
    for j in range(9):
        try:
            temp_fish.append(mapping_totals_128[j] * mapping_128[i][j])
        except:
            pass
    total_fish_256[i] = sum(temp_fish)

# Okay, now that I know how many fish are generated by a starting fish of each day status, I can calculate the total fish
final_fish = []
for i in range(6):
    try:
        final_fish.append(initial_distribution[i] * total_fish_256[i])
    except:
        pass

# Et voila
print(sum(final_fish))
